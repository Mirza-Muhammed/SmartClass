#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Hasheer Manzil_EXT";  
const char* password = "haneesh@123";  

#define RST_PIN  4
#define SS_PIN   21

MFRC522 mfrc522(SS_PIN, RST_PIN);

const String registerEndpoint = "http://192.168.1.101:5000/register_nfc";  
const String scanEndpoint = "http://192.168.1.101:5000/scan_nfc";  

bool isRegistrationMode = false;
bool isRunning = true;  // Flag to control program execution

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();
  
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {  
    delay(1000);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi. Restarting...");
    ESP.restart();
  }

  Serial.println("\nConnected to WiFi!");
  Serial.println("\nSystem ready. Type 'register' to enter registration mode, 'scan' to enter scanning mode, or 'exit' to stop.");
}

void loop() {
  if (!isRunning) {
    Serial.println("\nSystem halted. Restart ESP32 to resume.");
    while (true);  // Halt the system
  }

  if (Serial.available() > 0) {
    String input = Serial.readString();
    input.trim();

    if (input == "register") {
      isRegistrationMode = true;
      Serial.println("\nSwitching to Registration Mode. Scan a card to register.");
    } else if (input == "scan") {
      isRegistrationMode = false;
      Serial.println("\nSwitching to Scan Mode. Scan a card to log attendance.");
    } else if (input == "exit") {
      Serial.println("\nExiting program. System halted.");
      isRunning = false;  // Stop execution
    }
  }

  if (isRunning && mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uid = getUID();
    Serial.println("NFC UID: " + uid);

    if (isRegistrationMode) {
      Serial.print("Enter User Name: ");
      
      while (!Serial.available());  
      String name = Serial.readStringUntil('\n');
      name.trim();

      if (name.length() > 0) {
        registerCard(uid, name);
      } else {
        Serial.println("Invalid name. Please try again.");
      }
    } else {
      logAttendance(uid);
    }

    mfrc522.PICC_HaltA();  
    delay(1000);
  }
}

void registerCard(String uid, String name) {
  String payload = "{\"name\":\"" + name + "\",\"uid\":\"" + uid + "\"}";

  HTTPClient http;
  http.begin(registerEndpoint);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  String response = http.getString();

  Serial.println("Server Response: " + response);

  if (httpResponseCode == 201) {
    Serial.println("Card Registered Successfully!");
  } else if (httpResponseCode == 409) {
    Serial.println("Registration Failed: Card already registered.");
  } else {
    Serial.println("Registration Error: " + String(httpResponseCode));
  }
  http.end();
}

void logAttendance(String uid) {
  String payload = "{\"uid\":\"" + uid + "\"}";

  HTTPClient http;
  http.begin(scanEndpoint);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  String response = http.getString();

  Serial.println("Server Response: " + response);

  if (httpResponseCode == 200) {
    Serial.println("Attendance Logged Successfully!");
  } else if (httpResponseCode == 404) {
    Serial.println("User not found. Please register the card first.");
  } else {
    Serial.println("Attendance Error: " + String(httpResponseCode));
  }
  http.end();
}

String getUID() {
  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    uid += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "") + String(mfrc522.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();
  return uid;
}


---------------------------------------------------------------------------------------------------------------------------------------------


from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///test.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# User Table
class Userdata(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    uid = db.Column(db.String(25), unique=True, nullable=False)

# Attendance Table
class Attendance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    uid = db.Column(db.String(25), db.ForeignKey('userdata.uid'), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time_in = db.Column(db.DateTime, nullable=True)
    time_out = db.Column(db.DateTime, nullable=True)

@app.route('/')
def home():
    return redirect(url_for('view_data'))

@app.route('/view_data')
def view_data():
    users = Userdata.query.all()
    attendance = Attendance.query.order_by(Attendance.date.desc()).all()

    return render_template('view_data.html', users=users, attendance=attendance)

@app.route('/api/view_data')
def api_view_data():
    users = Userdata.query.all()
    attendance = Attendance.query.order_by(Attendance.date.desc()).all()

    users_list = [{"name": user.name, "uid": user.uid} for user in users]
    attendance_list = [
        {
            "name": Userdata.query.filter_by(uid=record.uid).first().name,  
            "uid": record.uid, 
            "date": record.date.strftime("%Y-%m-%d"), 
            "time_in": record.time_in.strftime("%H:%M:%S") if record.time_in else "N/A", 
            "time_out": record.time_out.strftime("%H:%M:%S") if record.time_out else "N/A"
        } 
        for record in attendance
    ]

    return jsonify({"users": users_list, "attendance": attendance_list})

# Register NFC Card
@app.route('/register_nfc', methods=['POST'])
def register_nfc():
    data = request.get_json()
    name = data.get("name", "").strip()
    uid = data.get("uid", "").strip().upper()

    if not name or not uid:
        return jsonify({"message": "Name and UID are required"}), 400

    if Userdata.query.filter_by(uid=uid).first():
        return jsonify({"message": "NFC card already registered"}), 400

    new_user = Userdata(name=name, uid=uid)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": f"User {name} registered successfully!"}), 201

# Scan NFC and log attendance
@app.route('/scan_nfc', methods=['POST'])
def scan_nfc():
    try:
        data = request.get_json()
        uid = data.get("uid", "").strip().upper()

        if not uid:
            return jsonify({"message": "No UID received"}), 400

        # Fetch user details from the Userdata table
        user = Userdata.query.filter_by(uid=uid).first()
        if not user:
            return jsonify({"message": "User not found. Please register the NFC card."}), 404

        today = datetime.today().date()
        existing_record = Attendance.query.filter_by(uid=uid, date=today).first()

        if existing_record:
            if existing_record.time_out:
                return jsonify({"message": f"User {user.name} has already logged out."}), 400
            
            # Update time_out if the user is logging out
            existing_record.time_out = datetime.now()
            db.session.commit()
            return jsonify({
                "message": f"Time Out recorded for {user.name}",
                "data": {
                    "name": user.name,
                    "uid": user.uid,
                    "date": existing_record.date.strftime("%Y-%m-%d"),
                    "time_in": existing_record.time_in.strftime("%H:%M:%S"),
                    "time_out": existing_record.time_out.strftime("%H:%M:%S")
                }
            }), 200
        
        # If no record exists, log time_in
        new_attendance = Attendance(
            name=user.name,   # Adding name field
            uid=uid,
            date=today,
            time_in=datetime.now(),
            time_out=None  # Initially NULL
        )
        db.session.add(new_attendance)
        db.session.commit()

        return jsonify({
            "message": f"Time In recorded for {user.name}",
            "data": {
                "name": user.name,
                "uid": user.uid,
                "date": today.strftime("%Y-%m-%d"),
                "time_in": new_attendance.time_in.strftime("%H:%M:%S"),
                "time_out": "N/A"
            }
        }), 200

    except Exception as e:
        print(f"Error in scan_nfc: {str(e)}")  # Debugging
        return jsonify({"message": "Server Error", "error": str(e)}), 500


if __name__ == '__main__':
    app.run(host='192.168.1.101', port=5000, debug=True)

------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Data</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .error-message {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Registered Users and Attendance Data</h1>

    <h2>Registered Users</h2>
    <p id="users-loading">Loading users...</p>
    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>UID</th>
            </tr>
        </thead>
        <tbody id="users-table"></tbody>
    </table>

    <h2>Attendance Records</h2>
    <p id="attendance-loading">Loading attendance data...</p>
    <table border="1">
        <thead>
            <tr>
                <th>Name</th>
                <th>UID</th>
                <th>Date</th>
                <th>Time In</th>
                <th>Time Out</th>
            </tr>
        </thead>
        <tbody id="attendance-table"></tbody>
    </table>

    <p id="error-message" class="error-message" style="display: none;"></p>

    <script>
        function fetchData() {
            $.ajax({
                url: '/api/view_data',  // Adjust if hosted elsewhere (e.g., http://localhost:5000/api/view_data)
                method: 'GET',
                dataType: 'json',
                beforeSend: function() {
                    $('#users-loading').show();
                    $('#attendance-loading').show();
                    $('#error-message').hide();
                },
                success: function(data) {
                    $('#users-loading').hide();
                    $('#attendance-loading').hide();

                    let usersTable = $('#users-table');
                    usersTable.empty();
                    if (data.users.length === 0) {
                        usersTable.append('<tr><td colspan="2">No registered users found.</td></tr>');
                    } else {
                        data.users.forEach(function(user) {
                            usersTable.append(`
                                <tr>
                                    <td>${user.name}</td>
                                    <td>${user.uid}</td>
                                </tr>
                            `);
                        });
                    }

                    let attendanceTable = $('#attendance-table');
                    attendanceTable.empty();
                    if (data.attendance.length === 0) {
                        attendanceTable.append('<tr><td colspan="5">No attendance records found.</td></tr>');
                    } else {
                        data.attendance.forEach(function(record) {
                            attendanceTable.append(`
                                <tr>
                                    <td>${record.name}</td>
                                    <td>${record.uid}</td>
                                    <td>${record.date}</td>
                                    <td>${record.time_in || 'N/A'}</td>
                                    <td>${record.time_out || 'N/A'}</td>
                                </tr>
                            `);
                        });
                    }
                },
                error: function(xhr, status, error) {
                    $('#users-loading').hide();
                    $('#attendance-loading').hide();
                    $('#error-message').text("Error fetching data: " + error).show();
                }
            });
        }

        // Fetch data every 5 seconds
        setInterval(fetchData, 5000);
        fetchData();
    </script>
</body>
</html>

