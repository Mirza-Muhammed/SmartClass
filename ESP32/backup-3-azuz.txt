#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Hasheer Manzil_EXT";
const char* password = "haneesh@123";

#define RST_PIN  4
#define SS_PIN   21

MFRC522 mfrc522(SS_PIN, RST_PIN);

const String registerEndpoint = "http://192.168.1.9:5000/register_nfc";
const String scanEndpoint = "http://192.168.1.9:5000/scan_nfc";

bool isRegistrationMode = false;
bool isRunning = true;
String role = "student";

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();
  
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {  
    delay(1000);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi. Please check your network and restart the device.");
    while (true);
}

  Serial.println("\nConnected to WiFi!");
  Serial.println("\nSystem ready. Type 'register' to enter registration mode, 'scan' to enter scanning mode, or 'exit' to stop.");
}

void reconnectWiFi() {
  Serial.println("WiFi Disconnected! Reconnecting...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nReconnected to WiFi!");
}



void loop() {
  if (!isRunning) {
    Serial.println("\nSystem halted. Restart ESP32 to resume.");
    while (true);
  }

  if (WiFi.status() != WL_CONNECTED) {
    reconnectWiFi();
  }
  
  if (Serial.available() > 0) {
    String input = Serial.readString();
    input.trim();

    if (input == "register") {
      isRegistrationMode = true;
      getUserType();
      Serial.println("\nSwitching to Registration Mode. Scan a card to register.");
    } else if (input == "scan") {
      isRegistrationMode = false;
      getUserType();
      Serial.println("\nSwitching to Scan Mode. Scan a card to log attendance.");
    } else if (input == "exit") {
      Serial.println("\nExiting program. System halted.");
      isRunning = false;
    }
  }

  if (isRunning && mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uid = getUID();
    Serial.println("NFC UID: " + uid);

    if (isRegistrationMode) {
      Serial.println("Enter the id:");
      while(!Serial.available());
      String id=Serial.readStringUntil('\n');
      id.trim();

      Serial.println("Enter User Name:");
      while (!Serial.available());
      String name = Serial.readStringUntil('\n');
      name.trim();

      Serial.println("Enter Gender (Male/Female/Other):");
      while (!Serial.available());
      String gender = Serial.readStringUntil('\n');
      gender.trim();

      if (name.length() > 0 && gender.length() > 0) {
        registerCard(id, uid, name, gender, role);
      } else {
        Serial.println("Invalid input. Please try again.");
      }
    } else {
      logAttendance(uid);
    }

    mfrc522.PICC_HaltA();  
    delay(1000);
  }
}

void getUserType() {
  Serial.println("Select Role: Type 'teacher' or 'student'");

  unsigned long startTime = millis();
  while (Serial.available() == 0) {
    if (millis() - startTime > 10000) {
      Serial.println("No input received. Defaulting to 'student'.");
      role = "student";
      return;
    }
  }

  role = Serial.readStringUntil('\n');  
  role.trim();
  role.toLowerCase();

  if (role != "teacher" && role != "student") {
    Serial.println("Invalid choice. Defaulting to 'student'.");
    role = "student";
  }

  Serial.print("Selected Role: ");
  Serial.println(role);
}


void registerCard(String id, String uid, String name, String gender, String role) {
String payload = "{\"id\":\"" + id + "\", \"name\":\"" + name + "\",\"uid\":\"" + uid + "\",\"gender\":\"" + gender + "\",\"role\":\"" + role + "\", \"attendance\":\"absent\"}";


  HTTPClient http;
  http.begin(registerEndpoint);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  String response = http.getString();

  Serial.println("Server Response: " + response);

  if (httpResponseCode == 201) {
    Serial.println("Card Registered Successfully!");
  } else if (httpResponseCode == 409) {
    Serial.println("Registration Failed: Card already registered.");
  } else {
    Serial.println("Registration Error: " + String(httpResponseCode));
  }
  http.end();
}

void logAttendance(String uid) {
  String payload = "{\"uid\":\"" + uid + "\",\"role\":\"" + role + "\", \"attendance\":\"present\"}";

  HTTPClient http;
  http.begin(scanEndpoint);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  String response = http.getString();

  Serial.println("Server Response: " + response);

  if (httpResponseCode == 200) {
    Serial.println("Attendance Logged Successfully!");
  } else if (httpResponseCode == 404) {
    Serial.println("User not found. Please register the card first.");
  } else {
    Serial.println("Attendance Error: " + String(httpResponseCode));
  }
  http.end();
}

String getUID() {
  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    uid += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "") + String(mfrc522.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();
  return uid;
}

------------------------------------------------------------------------------------------------------------------------------------------------

from flask import Flask, render_template, request, redirect, url_for, jsonify,session
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///test.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)


class Student(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    uid = db.Column(db.String(25), unique=True, nullable=False)
    gender = db.Column(db.String(10), nullable=False) 
    time_in = db.Column(db.DateTime, nullable=True,default=None)

class Teacher(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    uid = db.Column(db.String(25), unique=True, nullable=False)
    gender = db.Column(db.String(10), nullable=False)
    time_in = db.Column(db.DateTime, nullable=True,default=None)


users = {
    'teacher': {'username': 'teacher', 'password': 'teacher'},
    'admin': {'username': 'admin', 'password': 'admin'}
}

@app.route('/')
def home():
    return redirect(url_for('login'))  

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        
        if username == users['teacher']['username'] and password == users['teacher']['password']:
            return redirect(url_for('teacher_dashboard'))  
        
        elif username == users['admin']['username'] and password == users['admin']['password']:
            return redirect(url_for('admin_dashboard')) 
        else:
            return render_template('login.html', category="danger", message="Invalid login credentials")  # Show error message

    return render_template('login.html')


@app.route('/view_report/<int:id>')
def view_report(id):
   
    return f"Viewing report for student ID: {id}"



@app.route('/teacher_dashboard')
def teacher_dashboard():
    students = Student.query.all()
    return render_template('teacher.html', students=students)

@app.route('/api/teacher_dashboard')
def api_teacher_dashboard():
    students = Student.query.all()
    
    student_list = [{ "id": user.id, "name": user.name, "uid": user.uid, "gender": user.gender, "attendance": "Present" if user.time_in else "Absent"} for user in students]
    
    return jsonify({"students": student_list})

@app.route('/admin_dashboard')
def admin_dashboard():
    teachers = Teacher.query.all()
    return render_template('admin.html',teachers=teachers)

@app.route('/api/admin_dashboard')
def api_admin_dashboard():
    teachers = Teacher.query.all()
    teacher_list = [{"id": user.id, "name": user.name, "uid": user.uid, "gender": user.gender, "attendance": "Present" if user.time_in else "Absent"} for user in teachers]
        
    return jsonify({"teachers": teacher_list})


@app.route('/register_nfc', methods=['POST'])
def register_nfc():
    try:
        data = request.get_json()
        id=data.get("id","").strip()
        name = data.get("name", "").strip()
        uid = data.get("uid", "").strip().upper()
        gender = data.get("gender", "").strip().capitalize()
        role = data.get("role", "").strip().lower() 

        if not all([name, uid, gender, role]):
            return jsonify({"message": "Missing required fields"}), 400

        if role not in ["student", "teacher"]:
            return jsonify({"message": "Invalid role. Use 'student' or 'teacher'"}), 400

        
        if Student.query.filter_by(uid=uid).first() or Teacher.query.filter_by(uid=uid).first():
            return jsonify({"message": "UID is already registered"}), 400

        
        if role == "student":
            new_user = Student(id=id,name=name, uid=uid, gender=gender)
        else:
            new_user = Teacher(id=id,name=name, uid=uid, gender=gender)

        db.session.add(new_user)
        db.session.commit()

        return jsonify({"message": f"{role.capitalize()} {name} registered successfully"}), 201

    except Exception as e:
        return jsonify({"message": "Server Error", "error": str(e)}), 500



@app.route('/scan_nfc', methods=['POST'])
def scan_nfc():
    try:
        data = request.get_json()
        uid = data.get("uid", "").strip().upper()

        if not uid:
            return jsonify({"message": "No UID received"}), 400

        student = Student.query.filter_by(uid=uid).first()
        teacher = Teacher.query.filter_by(uid=uid).first()

        if student:
            if student.time_in:  # Check if time_in already exists
                return jsonify({"message": f"Student {student.name} attendance already recorded."}), 400
            
            student.time_in = datetime.now()  # Record the time_in
            db.session.commit()
            return jsonify({"message": f"Student {student.name} attendance recorded."}), 200

        elif teacher:
            if teacher.time_in:  # Check if time_in already exists
                return jsonify({"message": f"Teacher {teacher.name} attendance already recorded."}), 400
            
            teacher.time_in = datetime.now()  # Record the time_in
            db.session.commit()
            return jsonify({"message": f"Teacher {teacher.name} attendance recorded."}), 200

        return jsonify({"message": "User not found. Please register the NFC card."}), 404

    except Exception as e:
        return jsonify({"message": "Server Error", "error": str(e)}), 500


if __name__ == '__main__':
    app.run(host='192.168.1.9', port=5000, debug=True)

------------------------------------------------------------------------------------------------------------------------------------------------
teacher.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher's Page</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Teacher's Portal</h1>
        <h2>Student Data</h2>
    
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>NAME</th>
                    <th>UID</th>
                    <th>GENDER</th>
                    <th>ATTENDANCE</th>
                </tr>
            </thead>
            <tbody id="students-table"></tbody>
        </table>

        <p id="error-message" class="error-message" style="display: none;"></p>

        <script>
            function fetchData(){
                $.ajax({
                    url: '/api/teacher_dashboard',
                    method: 'GET',
                    dataType: 'json',
                    success: function(data) {
                        let studentsTable = $('#students-table');

                        studentsTable.empty();

                        if (data.students.length === 0) {
                        studentsTable.append('<tr><td colspan="5">No students registered.</td></tr>');
                    } else {
                        data.students.forEach(function(student) {
                            studentsTable.append(`
                                <tr>
                                    <td>${student.id}</td>
                                    <td>${student.name}</td>
                                    <td>${student.uid}</td>
                                    <td>${student.gender}</td>
                                    <td>${student.attendance}</td>
				    <td><a href="/view_report/${student.id}">View Report</a></td>
                                </tr>
                            `);
                        });
                    }
                },
                error: function(xhr, status, error) {
                    $('#error-message').text("Error fetching data: " + error).show();
                }
            });
        }
        setInterval(fetchData, 5000);
        fetchData();
        </script>
       
        <hr style="margin-top: 50px; margin-bottom: 50px;">
        <a href="/" class="updateBtn">Logout</a>
    </div>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------

admin.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin's Page</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Admin's Portal</h1>
        <h2>Teachers Data</h2>
    
        <table id="TeacherTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>NAME</th>
                    <th>UID</th>
                    <th>GENDER</th>
                    <th>ATTENDANCE</th>
                </tr>
            </thead>
            <tbody id="teachers-table"></tbody>
        </table>

        <p id="error-message" class="error-message" style="display: none;"></p>

        <script>
            function fetchData() {
                $.ajax({
                    url: '/api/admin_dashboard',
                    method: 'GET',
                    dataType: 'json',
                    success: function(data) {
                        let teachersTable = $('#teachers-table');
    
                        teachersTable.empty();
    
                        // Display registered teachers
                        if (data.teachers.length === 0) {
                            teachersTable.append('<tr><td colspan="5">No teachers registered.</td></tr>');
                        } else {
                            data.teachers.forEach(function(teacher) {
                                teachersTable.append(`
                                    <tr>
                                        <td>${teacher.id}</td>
                                        <td>${teacher.name}</td>
                                        <td>${teacher.uid}</td>
                                        <td>${teacher.gender}</td>
                                        <td>${teacher.attendance}</td>
                                    </tr>
                                `);
                            });
                        }
                    },
                    error: function(xhr, status, error) {
                        $('#error-message').text("Error fetching data: " + error).show();
                    }
                });
            }
    
            setInterval(fetchData, 5000);
            fetchData();
        </script>
       
        <hr style="margin-top: 50px; margin-bottom: 50px;">
        
        <a href="/" class="updateBtn">Logout</a>
    </div>
</body>
</html>

------------------------------------------------------------------------------------------------------------------------------------------------

login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <title>Login Page</title>
    <style>
        body {
            background-color: #ffffff; 
            color: #343a40; 
        }
        .center-tabs {
            display: flex;
            justify-content: center;
            margin-top: 50px;
        }
        .navbar {
            background-color: #3d3c3c !important; 
            height: 80px; 
        }
        .navbar-brand {
            position: absolute;
            width: 100%;
            left: 0;
            text-align: center;
            margin: auto;
            color: #ffffff; 
        }
        .navbar-brand h1 {
            font-size: 5rem; 
        }
        .nav-link {
            color: #343a40 !important; 
        }
        .nav-link.active {
            background-color: #f8f9fa !important; 
        }
        .card {
            background-color: #f8f9fa; 
            color: #343a40; 
        }
        .card-header {
            background-color: #ffffff; 
        }
        .btn-primary {
            background-color: #3d3c3c; 
            border-color: #3d3c3c; 
            color: #ffffff; 
        }
        .btn-primary:hover {
            background-color: #242323; 
            border-color: #242323; 
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <nav class="navbar navbar-expand-lg">
            <div class="container-fluid">
              <span class="navbar-brand mb-0 h1">SmartClass</span>
            </div>
        </nav>
        <div class="container center-tabs">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="tab" href="#teacherTab">Teacher</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="tab" href="#adminTab">Admin</a>
                </li>
            </ul>
        </div>

        <div class="container">
            <div class="tab-content">
               
                <div id="teacherTab" class="tab-pane fade show active">
                    <div class="card border-primary mb-3">
                        <div class="card-header">
                            <h3 class="card-title">Teacher Login</h3>
                        </div>
                        <div class="card-body">
                            
                            <form action="/login" method="POST">
                                {% if category %}
                                    <div class="alert alert-{{ category }}" role="alert">
                                        {{ message }}
                                    </div>
                                {% endif %}
                                <div class="form-group">
                                    <label for="login_username">Username</label>
                                    <input type="text" class="form-control" id="login_username" name="username" placeholder="Enter your username">
                                </div>
                                <div class="form-group">
                                    <label for="login_password">Password</label>
                                    <input type="password" class="form-control" id="login_password" name="password" placeholder="Enter password">
                                </div>
                                <button type="submit" class="btn btn-primary btn-block">Sign in</button>
                            </form>
                        </div>
                    </div>
                </div>

              
                <div id="adminTab" class="tab-pane fade">
                    <div class="card border-primary mb-3">
                        <div class="card-header">
                            <h3 class="card-title">Admin Login</h3>
                        </div>
                        <div class="card-body">
                            <form action="/login" method="POST">
                                {% if category %}
                                    <div class="alert alert-{{ category }}" role="alert">
                                        {{ message }}
                                    </div>
                                {% endif %}
                                <div class="form-group">
                                    <label for="login_username">Admin ID</label>
                                    <input type="text" class="form-control" id="login_username" name="username" placeholder="Enter Admin ID">
                                </div>
                                <div class="form-group">
                                    <label for="login_password">Password</label>
                                    <input type="password" class="form-control" id="login_password" name="password" placeholder="Enter password">
                                </div>
                                <button type="submit" class="btn btn-primary btn-block">Sign in</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

