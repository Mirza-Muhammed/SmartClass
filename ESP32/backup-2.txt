#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Hasheer Manzil_EXT";
const char* password = "haneesh@123";

#define RST_PIN  4
#define SS_PIN   21

MFRC522 mfrc522(SS_PIN, RST_PIN);

const String registerEndpoint = "http://192.168.1.101:5000/register_nfc";
const String scanEndpoint = "http://192.168.1.101:5000/scan_nfc";

bool isRegistrationMode = false;
bool isRunning = true;
String role = "student";

void setup() {
  Serial.begin(115200);
  SPI.begin();
  mfrc522.PCD_Init();
  
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {  
    delay(1000);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi. Restarting in 5 seconds...");
    delay(5000);
    ESP.restart();
  }

  Serial.println("\nConnected to WiFi!");
  Serial.println("\nSystem ready. Type 'register' to enter registration mode, 'scan' to enter scanning mode, or 'exit' to stop.");
}



void loop() {
  if (!isRunning) {
    Serial.println("\nSystem halted. Restart ESP32 to resume.");
    while (true);
  }

  if (Serial.available() > 0) {
    String input = Serial.readString();
    input.trim();

    if (input == "register") {
      isRegistrationMode = true;
      getUserType();
      Serial.println("\nSwitching to Registration Mode. Scan a card to register.");
    } else if (input == "scan") {
      isRegistrationMode = false;
      getUserType();
      Serial.println("\nSwitching to Scan Mode. Scan a card to log attendance.");
    } else if (input == "exit") {
      Serial.println("\nExiting program. System halted.");
      isRunning = false;
    }
  }

  if (isRunning && mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uid = getUID();
    Serial.println("NFC UID: " + uid);

    if (isRegistrationMode) {
      Serial.println("Enter User Name:");
      while (!Serial.available());
      String name = Serial.readStringUntil('\n');
      name.trim();

      Serial.println("Enter Gender (Male/Female/Other):");
      while (!Serial.available());
      String gender = Serial.readStringUntil('\n');
      gender.trim();

      if (name.length() > 0 && gender.length() > 0) {
        registerCard(uid, name, gender, role);
      } else {
        Serial.println("Invalid input. Please try again.");
      }
    } else {
      logAttendance(uid);
    }

    mfrc522.PICC_HaltA();  
    delay(1000);
  }
}

void getUserType() {
  Serial.println("Select Role: Type 'teacher' or 'student'");

  unsigned long startTime = millis();
  while (Serial.available() == 0) {
    if (millis() - startTime > 10000) {
      Serial.println("No input received. Defaulting to 'student'.");
      role = "student";
      return;
    }
  }

  role = Serial.readStringUntil('\n');  
  role.trim();
  role.toLowerCase();

  if (role != "teacher" && role != "student") {
    Serial.println("Invalid choice. Defaulting to 'student'.");
    role = "student";
  }

  Serial.print("Selected Role: ");
  Serial.println(role);
}


void registerCard(String uid, String name, String gender, String role) {
  String payload = "{\"name\":\"" + name + "\",\"uid\":\"" + uid + "\",\"gender\":\"" + gender + "\",\"role\":\"" + role + "\"}";

  HTTPClient http;
  http.begin(registerEndpoint);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  String response = http.getString();

  Serial.println("Server Response: " + response);

  if (httpResponseCode == 201) {
    Serial.println("Card Registered Successfully!");
  } else if (httpResponseCode == 409) {
    Serial.println("Registration Failed: Card already registered.");
  } else {
    Serial.println("Registration Error: " + String(httpResponseCode));
  }
  http.end();
}

void logAttendance(String uid) {
  String payload = "{\"uid\":\"" + uid + "\",\"role\":\"" + role + "\"}";

  HTTPClient http;
  http.begin(scanEndpoint);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(payload);
  String response = http.getString();

  Serial.println("Server Response: " + response);

  if (httpResponseCode == 200) {
    Serial.println("Attendance Logged Successfully!");
  } else if (httpResponseCode == 404) {
    Serial.println("User not found. Please register the card first.");
  } else {
    Serial.println("Attendance Error: " + String(httpResponseCode));
  }
  http.end();
}

String getUID() {
  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    uid += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "") + String(mfrc522.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();
  return uid;
}

------------------------------------------------------------------------------------------------------------------------------------------------

from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = "sqlite:///test.db"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)


class Student(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    uid = db.Column(db.String(25), unique=True, nullable=False)
    gender = db.Column(db.String(10), nullable=False)  # 'Male' or 'Female'


class Teacher(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    uid = db.Column(db.String(25), unique=True, nullable=False)
    gender = db.Column(db.String(10), nullable=False)  # 'Male' or 'Female'


class StudentAttendance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    student_id = db.Column(db.Integer, db.ForeignKey('student.id'), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time_in = db.Column(db.DateTime, nullable=True)
    time_out = db.Column(db.DateTime, nullable=True)
    student = db.relationship('Student', backref=db.backref('attendance', lazy=True))


class TeacherAttendance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey('teacher.id'), nullable=False)
    date = db.Column(db.Date, nullable=False)
    time_in = db.Column(db.DateTime, nullable=True)
    time_out = db.Column(db.DateTime, nullable=True)
    teacher = db.relationship('Teacher', backref=db.backref('attendance', lazy=True))

@app.route('/')
def home():
    return redirect(url_for('view_data'))

@app.route('/view_data')
def view_data():
    students = Student.query.all()
    teachers = Teacher.query.all()
    student_attendance = StudentAttendance.query.order_by(StudentAttendance.date.desc()).all()
    teacher_attendance = TeacherAttendance.query.order_by(TeacherAttendance.date.desc()).all()
    return render_template('view_data.html', students=students, teachers=teachers, student_attendance=student_attendance, teacher_attendance=teacher_attendance)

@app.route('/api/view_data')
def api_view_data():
    students = Student.query.all()
    teachers = Teacher.query.all()
    student_attendance = StudentAttendance.query.order_by(StudentAttendance.date.desc()).all()
    teacher_attendance = TeacherAttendance.query.order_by(TeacherAttendance.date.desc()).all()
    
    student_list = [{"name": user.name, "uid": user.uid, "gender": user.gender} for user in students]
    student_attendance_list = [
        {
            "name": record.student.name,  
            "uid": record.student.uid,
            "gender": record.student.gender,
            "date": record.date.strftime("%Y-%m-%d"),
            "time_in": record.time_in.strftime("%H:%M:%S") if record.time_in else "N/A",
            "time_out": record.time_out.strftime("%H:%M:%S") if record.time_out else "N/A"
        } 
        for record in student_attendance
    ]
    teacher_list = [{"name": user.name, "uid": user.uid, "gender": user.gender} for user in teachers]
    teacher_attendance_list = [
        {
            "name": record.teacher.name,  
            "uid": record.teacher.uid,
            "gender": record.teacher.gender,
            "date": record.date.strftime("%Y-%m-%d"),
            "time_in": record.time_in.strftime("%H:%M:%S") if record.time_in else "N/A",
            "time_out": record.time_out.strftime("%H:%M:%S") if record.time_out else "N/A"
        } 
        for record in teacher_attendance
    ]
    return jsonify({"students": student_list, "teachers": teacher_list, "student_attendance": student_attendance_list, "teacher_attendance": teacher_attendance_list})

@app.route('/register_nfc', methods=['POST'])
def register_nfc():
    try:
        data = request.get_json()
        name = data.get("name", "").strip()
        uid = data.get("uid", "").strip().upper()
        gender = data.get("gender", "").strip().capitalize()
        role = data.get("role", "").strip().lower()  # "student" or "teacher"

        if not all([name, uid, gender, role]):
            return jsonify({"message": "Missing required fields"}), 400

        if role not in ["student", "teacher"]:
            return jsonify({"message": "Invalid role. Use 'student' or 'teacher'"}), 400

        
        if Student.query.filter_by(uid=uid).first() or Teacher.query.filter_by(uid=uid).first():
            return jsonify({"message": "UID is already registered"}), 400

        
        if role == "student":
            new_user = Student(name=name, uid=uid, gender=gender)
        else:
            new_user = Teacher(name=name, uid=uid, gender=gender)

        db.session.add(new_user)
        db.session.commit()

        return jsonify({"message": f"{role.capitalize()} {name} registered successfully"}), 201

    except Exception as e:
        return jsonify({"message": "Server Error", "error": str(e)}), 500



@app.route('/scan_nfc', methods=['POST'])
def scan_nfc():
    try:
        data = request.get_json()
        uid = data.get("uid", "").strip().upper()

        if not uid:
            return jsonify({"message": "No UID received"}), 400

        student = Student.query.filter_by(uid=uid).first()
        teacher = Teacher.query.filter_by(uid=uid).first()
        today = datetime.today().date()
        
        if student:
            existing_record = StudentAttendance.query.filter_by(student_id=student.id, date=today).first()
            if existing_record and existing_record.time_out:
                return jsonify({"message": f"Student {student.name} has already logged out."}), 400
            
            if existing_record:
                existing_record.time_out = datetime.now()
            else:
                new_attendance = StudentAttendance(student_id=student.id, date=today, time_in=datetime.now())
                db.session.add(new_attendance)
            db.session.commit()
            return jsonify({"message": f"Student {student.name} attendance recorded."}), 200
        
        elif teacher:
            existing_record = TeacherAttendance.query.filter_by(teacher_id=teacher.id, date=today).first()
            if existing_record and existing_record.time_out:
                return jsonify({"message": f"Teacher {teacher.name} has already logged out."}), 400
            
            if existing_record:
                existing_record.time_out = datetime.now()
            else:
                new_attendance = TeacherAttendance(teacher_id=teacher.id, date=today, time_in=datetime.now())
                db.session.add(new_attendance)
            db.session.commit()
            return jsonify({"message": f"Teacher {teacher.name} attendance recorded."}), 200
        
        return jsonify({"message": "User not found. Please register the NFC card."}), 404
    
    except Exception as e:
        return jsonify({"message": "Server Error", "error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='192.168.1.101', port=5000, debug=True)


------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Data</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .error-message {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Registered Users and Attendance Data</h1>

    <h2>Registered Users</h2>
    <h3>Teachers</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>UID</th>
                <th>Gender</th>
            </tr>
        </thead>
        <tbody id="teachers-table"></tbody>
    </table>

    <h3>Students</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>UID</th>
                <th>Gender</th>
            </tr>
        </thead>
        <tbody id="students-table"></tbody>
    </table>

    <h2>Attendance Records</h2>
    <h3>Teachers</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>UID</th>
                <th>Gender</th>
                <th>Date</th>
                <th>Time In</th>
                <th>Time Out</th>
            </tr>
        </thead>
        <tbody id="teachers-attendance"></tbody>
    </table>

    <h3>Students</h3>
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>UID</th>
                <th>Gender</th>
                <th>Date</th>
                <th>Time In</th>
                <th>Time Out</th>
            </tr>
        </thead>
        <tbody id="students-attendance"></tbody>
    </table>

    <p id="error-message" class="error-message" style="display: none;"></p>

    <script>
        function fetchData() {
            $.ajax({
                url: '/api/view_data',
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    let teachersTable = $('#teachers-table');
                    let studentsTable = $('#students-table');
                    let teachersAttendance = $('#teachers-attendance');
                    let studentsAttendance = $('#students-attendance');

                    teachersTable.empty();
                    studentsTable.empty();
                    teachersAttendance.empty();
                    studentsAttendance.empty();

                    // Display registered teachers
                    if (data.teachers.length === 0) {
                        teachersTable.append('<tr><td colspan="3">No teachers registered.</td></tr>');
                    } else {
                        data.teachers.forEach(function(teacher) {
                            teachersTable.append(`
                                <tr>
                                    <td>${teacher.name}</td>
                                    <td>${teacher.uid}</td>
                                    <td>${teacher.gender}</td>
                                </tr>
                            `);
                        });
                    }

                    // Display registered students
                    if (data.students.length === 0) {
                        studentsTable.append('<tr><td colspan="3">No students registered.</td></tr>');
                    } else {
                        data.students.forEach(function(student) {
                            studentsTable.append(`
                                <tr>
                                    <td>${student.name}</td>
                                    <td>${student.uid}</td>
                                    <td>${student.gender}</td>
                                </tr>
                            `);
                        });
                    }

                    // Display teacher attendance (only if they have scanned)
                    if (data.teacher_attendance.length === 0) {
                        teachersAttendance.append('<tr><td colspan="6">No teacher attendance records found.</td></tr>');
                    } else {
                        data.teacher_attendance.forEach(function(record) {
                            teachersAttendance.append(`
                                <tr>
                                    <td>${record.name}</td>
                                    <td>${record.uid}</td>
                                    <td>${record.gender}</td>
                                    <td>${record.date}</td>
                                    <td>${record.time_in || 'N/A'}</td>
                                    <td>${record.time_out || 'N/A'}</td>
                                </tr>
                            `);
                        });
                    }

                    // Display student attendance (only if they have scanned)
                    if (data.student_attendance.length === 0) {
                        studentsAttendance.append('<tr><td colspan="6">No student attendance records found.</td></tr>');
                    } else {
                        data.student_attendance.forEach(function(record) {
                            studentsAttendance.append(`
                                <tr>
                                    <td>${record.name}</td>
                                    <td>${record.uid}</td>
                                    <td>${record.gender}</td>
                                    <td>${record.date}</td>
                                    <td>${record.time_in || 'N/A'}</td>
                                    <td>${record.time_out || 'N/A'}</td>
                                </tr>
                            `);
                        });
                    }
                },
                error: function(xhr, status, error) {
                    $('#error-message').text("Error fetching data: " + error).show();
                }
            });
        }

        setInterval(fetchData, 5000);
        fetchData();
    </script>
</body>
</html>
